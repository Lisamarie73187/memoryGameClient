[{"/Users/lisaherzberg/Code/projects/1.2021/memoryGame/client/memory-game/src/index.js":"1","/Users/lisaherzberg/Code/projects/1.2021/memoryGame/client/memory-game/src/App.js":"2","/Users/lisaherzberg/Code/projects/1.2021/memoryGame/client/memory-game/src/reportWebVitals.js":"3","/Users/lisaherzberg/Code/projects/1.2021/memoryGame/client/memory-game/src/components/SignIn.js":"4","/Users/lisaherzberg/Code/projects/1.2021/memoryGame/client/memory-game/src/components/Game.jsx":"5","/Users/lisaherzberg/Code/projects/1.2021/memoryGame/client/memory-game/src/components/Card.js":"6","/Users/lisaherzberg/Code/projects/1.2021/memoryGame/client/memory-game/src/components/Lobby.js":"7"},{"size":500,"mtime":499162500000,"results":"8","hashOfConfig":"9"},{"size":1694,"mtime":1611547031690,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":499162500000,"results":"11","hashOfConfig":"9"},{"size":711,"mtime":1611529153712,"results":"12","hashOfConfig":"9"},{"size":1831,"mtime":1611547031683,"results":"13","hashOfConfig":"9"},{"size":2160,"mtime":1611444988106,"results":"14","hashOfConfig":"9"},{"size":1305,"mtime":1611547051280,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1o1wil4",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"18"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/lisaherzberg/Code/projects/1.2021/memoryGame/client/memory-game/src/index.js",[],["33","34"],"/Users/lisaherzberg/Code/projects/1.2021/memoryGame/client/memory-game/src/App.js",[],"/Users/lisaherzberg/Code/projects/1.2021/memoryGame/client/memory-game/src/reportWebVitals.js",[],"/Users/lisaherzberg/Code/projects/1.2021/memoryGame/client/memory-game/src/components/SignIn.js",[],"/Users/lisaherzberg/Code/projects/1.2021/memoryGame/client/memory-game/src/components/Game.jsx",["35"],"import React,{useState, useEffect} from 'react'\nimport Card from './Card'\n\n\n\n\nfunction Game({options, socket}) {\n    const [game, setGame] = useState([]);\n    const [flippedCount, setFlippedCount] = useState(0);\n    const [flippedIndexes, setFlippedIndexes] = useState([]);\n\n\n    useEffect(() => {\n        socket.current.emit('newGame', options);\n        socket.current.on('newGame', (shuffledGame) => {\n            setGame(shuffledGame)\n        })\n    }, []);\n\n\n    if (flippedIndexes.length === 2) {\n        const match = game[flippedIndexes[0]].colorId === game[flippedIndexes[1]].colorId;\n\n        if (match) {\n            const newGame = [...game];\n            newGame[flippedIndexes[0]].flipped = true;\n            newGame[flippedIndexes[1]].flipped = true;\n            setGame(newGame);\n\n            const newIndexes = [...flippedIndexes];\n            newIndexes.push(false);\n            setFlippedIndexes(newIndexes)\n        } else {\n            const newIndexes = [...flippedIndexes];\n            newIndexes.push(true);\n            setFlippedIndexes(newIndexes)\n        }\n    }\n\n    if (game.length === 0) return <div>loading...</div>;\n    else {\n        return (\n            <div id=\"cards\">\n                {game.map((card, index) => (\n                    <div className=\"card\" key={index}>\n                        <Card\n                            id={index}\n                            color={card.color}\n                            game={game}\n                            flippedCount={flippedCount}\n                            setFlippedCount={setFlippedCount}\n                            flippedIndexes={flippedIndexes}\n                            setFlippedIndexes={setFlippedIndexes}\n                        />\n                    </div>\n                ))}\n            </div>\n        )\n}\n}\n\nexport default Game;\n","/Users/lisaherzberg/Code/projects/1.2021/memoryGame/client/memory-game/src/components/Card.js",["36"],"import React,{useState, useEffect} from 'react'\nimport { useSpring, animated as a } from 'react-spring'\n\n\nfunction Card({id, color, game, flippedCount, setFlippedCount, flippedIndexes, setFlippedIndexes}) {\n    const [flipped, set] = useState(false);\n    const {transform, opacity} = useSpring({\n        opacity: flipped ? 1 : 0,\n        transform: `perspective(600px) rotateX(${flipped ? 180 : 0}deg)`,\n        config: {mass: 5, tension: 500, friction: 80},\n    })\n\n    useEffect(() => {\n        if (flippedIndexes[2] === true && flippedIndexes.indexOf(id) > -1) {\n            setTimeout(() => {\n                set(state => !state)\n                setFlippedCount(flippedCount + 1);\n                setFlippedIndexes([])\n            }, 1000)\n        } else if (flippedIndexes[2] === false && id === 0) {\n            setFlippedCount(flippedCount + 1);\n            setFlippedIndexes([])\n        }\n    }, [flippedIndexes]);\n\n    const onCardClick = () => {\n        if (!game[id].flipped && flippedCount % 3 === 0) {\n            set(state => !state);\n            setFlippedCount(flippedCount + 1);\n            const newIndexes = [...flippedIndexes];\n            newIndexes.push(id);\n            setFlippedIndexes(newIndexes)\n        } else if (\n            flippedCount % 3 === 1 &&\n            !game[id].flipped &&\n            flippedIndexes.indexOf(id) < 0\n        ) {\n            set(state => !state);\n            setFlippedCount(flippedCount + 1);\n            const newIndexes = [...flippedIndexes];\n            newIndexes.push(id);\n            setFlippedIndexes(newIndexes)\n        }\n    };\n\n    return (\n        <div onClick={onCardClick}>\n            <a.div\n                className=\"c back\"\n                style={{\n                    opacity: opacity.interpolate(o => 1 - o),\n                    transform,\n                }}\n            />\n            <a.div\n                className=\"c front\"\n                style={{\n                    opacity,\n                    transform: transform.interpolate(t => `${t} rotateX(180deg)`),\n                    background: color,\n                }}\n            />\n        </div>\n    )\n}\n\nexport default Card;\n","/Users/lisaherzberg/Code/projects/1.2021/memoryGame/client/memory-game/src/components/Lobby.js",[],{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","severity":1,"message":"42","line":18,"column":8,"nodeType":"43","endLine":18,"endColumn":10,"suggestions":"44"},{"ruleId":"41","severity":1,"message":"45","line":24,"column":8,"nodeType":"43","endLine":24,"endColumn":24,"suggestions":"46"},"no-native-reassign",["47"],"no-negated-in-lhs",["48"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'options' and 'socket'. Either include them or remove the dependency array.","ArrayExpression",["49"],"React Hook useEffect has missing dependencies: 'flippedCount', 'id', 'setFlippedCount', and 'setFlippedIndexes'. Either include them or remove the dependency array. If 'setFlippedCount' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["50"],"no-global-assign","no-unsafe-negation",{"desc":"51","fix":"52"},{"desc":"53","fix":"54"},"Update the dependencies array to be: [options, socket]",{"range":"55","text":"56"},"Update the dependencies array to be: [flippedCount, flippedIndexes, id, setFlippedCount, setFlippedIndexes]",{"range":"57","text":"58"},[460,462],"[options, socket]",[904,920],"[flippedCount, flippedIndexes, id, setFlippedCount, setFlippedIndexes]"]