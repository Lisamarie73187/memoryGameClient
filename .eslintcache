[{"/Users/lisaherzberg/Code/projects/1.2021/memoryGame/client/memory-game/src/index.js":"1","/Users/lisaherzberg/Code/projects/1.2021/memoryGame/client/memory-game/src/App.js":"2","/Users/lisaherzberg/Code/projects/1.2021/memoryGame/client/memory-game/src/reportWebVitals.js":"3","/Users/lisaherzberg/Code/projects/1.2021/memoryGame/client/memory-game/src/components/SignIn.js":"4","/Users/lisaherzberg/Code/projects/1.2021/memoryGame/client/memory-game/src/components/Game.jsx":"5","/Users/lisaherzberg/Code/projects/1.2021/memoryGame/client/memory-game/src/components/Card.js":"6"},{"size":500,"mtime":499162500000,"results":"7","hashOfConfig":"8"},{"size":1864,"mtime":1611522328380,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":499162500000,"results":"10","hashOfConfig":"8"},{"size":785,"mtime":1611517397678,"results":"11","hashOfConfig":"8"},{"size":2550,"mtime":1611514319579,"results":"12","hashOfConfig":"8"},{"size":2160,"mtime":1611444988106,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1o1wil4",{"filePath":"17","messages":"18","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"16"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"16"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"31"},"/Users/lisaherzberg/Code/projects/1.2021/memoryGame/client/memory-game/src/index.js",[],["32","33"],"/Users/lisaherzberg/Code/projects/1.2021/memoryGame/client/memory-game/src/App.js",["34","35"],"import React, {useState, useEffect, useRef} from 'react'\nimport './App.css';\nimport SignIn from \"./components/SignIn\";\nimport Game from './components/Game';\nimport io from \"socket.io-client/build/index\";\n\n\nfunction App() {\n    const [userName, setUserName] = useState('');\n    const [userList, setUserList] = useState([]);\n    const [everyoneReady, setEveryoneReady] = useState(false);\n    const socket = useRef(null);\n\n    const options = 26;\n\n    useEffect(() => {\n        socket.current = io.connect(\"http://localhost:8080\", {\n            withCredentials: true,\n            extraHeaders: {\n                \"my-custom-header\": \"abcd\"\n            }\n        });\n        socket.current.on('users', (users) => {\n            setUserList(users)\n        })\n    },[]);\n\n    useEffect(() => {\n        if(userList.length > 0){\n            const test = userList.every(e => e.ready === true)\n            setEveryoneReady(test)\n        }\n    },[userList]);\n\n\n    const join = (name) => {\n        setUserName(name);\n        socket.current.emit('join', name)\n    };\n\n    const playerIsReady = () => {\n        socket.current.emit('ready', true)\n    };\n\n    console.log(everyoneReady)\n\n  return (\n    <div className=\"App\">\n        <h1>Memory Game</h1>\n        {!userName && (\n            <SignIn getUserName={join} />\n        )}\n        {userName &&\n\n        <div>\n            {userList.map((e,i) => {\n                return (\n                    <div>\n                        {e.name}\n                        <div onClick={playerIsReady}>{!!e.ready ? 'ready' : 'ready?'}</div>\n                    </div>\n                )\n            })}\n        </div>\n        }\n        {everyoneReady &&\n        <div>Lets Play</div>\n        }\n        {/*<Game*/}\n            {/*options={options}*/}\n            {/*userName={userName}*/}\n        {/*/>*/}\n    </div>\n  );\n}\n\nexport default App;\n","/Users/lisaherzberg/Code/projects/1.2021/memoryGame/client/memory-game/src/reportWebVitals.js",[],"/Users/lisaherzberg/Code/projects/1.2021/memoryGame/client/memory-game/src/components/SignIn.js",["36","37"],"import React,{useState, useRef} from 'react'\nimport io from \"socket.io-client/build/index\";\n\n\n\nfunction SignIn(props) {\n    const [userName, setUserName] = useState('');\n\n\n    const submitUserName = () => {\n        props.getUserName(userName)\n    };\n\n    return (\n        <div className=\"signIn\">\n            <div className=\"textOne\">Hello Welcome,</div>\n            <div className=\"textOne\">What is your name?</div>\n                <input\n                    placeholder='enter your name'\n                    value={userName}\n                    onChange={(event) => setUserName(event.target.value)}\n                />\n               <div className=\"button\" onClick={submitUserName}>\n                    I'm Ready\n               </div>\n        </div>\n    );\n}\n\nexport default SignIn;\n","/Users/lisaherzberg/Code/projects/1.2021/memoryGame/client/memory-game/src/components/Game.jsx",["38"],"import React,{useState, useEffect} from 'react'\nimport Card from './Card'\n\n\n\n\nfunction Game({options, userName}) {\n    const [game, setGame] = useState([]);\n    const [flippedCount, setFlippedCount] = useState(0);\n    const [flippedIndexes, setFlippedIndexes] = useState([]);\n\n    const colors = [\n        '#ecdb54',\n        '#e34132',\n        '#6ca0dc',\n        '#944743',\n        '#dbb2d1',\n        '#ec9787',\n        '#00a68c',\n        '#645394',\n        '#6c4f3d',\n        '#ebe1df',\n        '#bc6ca7',\n        '#bfd833',\n    ];\n\n    useEffect(() => {\n        const newGame = [];\n        for (let i = 0; i < options / 2; i++) {\n            const firstOption = {\n                id: 2 * i,\n                colorId: i,\n                color: colors[i],\n                flipped: false,\n            };\n            const secondOption = {\n                id: 2 * i + 1,\n                colorId: i,\n                color: colors[i],\n                flipped: false,\n            };\n\n            newGame.push(firstOption);\n            newGame.push(secondOption);\n        }\n\n        const shuffledGame = newGame.sort(() => Math.random() - 0.5);\n        setGame(shuffledGame)\n    }, []);\n\n\n    if (flippedIndexes.length === 2) {\n        const match = game[flippedIndexes[0]].colorId === game[flippedIndexes[1]].colorId;\n\n        if (match) {\n            const newGame = [...game];\n            newGame[flippedIndexes[0]].flipped = true;\n            newGame[flippedIndexes[1]].flipped = true;\n            setGame(newGame);\n\n            const newIndexes = [...flippedIndexes];\n            newIndexes.push(false);\n            setFlippedIndexes(newIndexes)\n        } else {\n            const newIndexes = [...flippedIndexes];\n            newIndexes.push(true);\n            setFlippedIndexes(newIndexes)\n        }\n    }\n\n    if (game.length === 0) return <div>loading...</div>;\n    else {\n        return (\n            <div id=\"cards\">\n                {game.map((card, index) => (\n                    <div className=\"card\" key={index}>\n                        <Card\n                            id={index}\n                            color={card.color}\n                            game={game}\n                            flippedCount={flippedCount}\n                            setFlippedCount={setFlippedCount}\n                            flippedIndexes={flippedIndexes}\n                            setFlippedIndexes={setFlippedIndexes}\n                        />\n                    </div>\n                ))}\n            </div>\n        )\n}\n}\n\nexport default Game;\n","/Users/lisaherzberg/Code/projects/1.2021/memoryGame/client/memory-game/src/components/Card.js",["39"],"import React,{useState, useEffect} from 'react'\nimport { useSpring, animated as a } from 'react-spring'\n\n\nfunction Card({id, color, game, flippedCount, setFlippedCount, flippedIndexes, setFlippedIndexes}) {\n    const [flipped, set] = useState(false);\n    const {transform, opacity} = useSpring({\n        opacity: flipped ? 1 : 0,\n        transform: `perspective(600px) rotateX(${flipped ? 180 : 0}deg)`,\n        config: {mass: 5, tension: 500, friction: 80},\n    })\n\n    useEffect(() => {\n        if (flippedIndexes[2] === true && flippedIndexes.indexOf(id) > -1) {\n            setTimeout(() => {\n                set(state => !state)\n                setFlippedCount(flippedCount + 1);\n                setFlippedIndexes([])\n            }, 1000)\n        } else if (flippedIndexes[2] === false && id === 0) {\n            setFlippedCount(flippedCount + 1);\n            setFlippedIndexes([])\n        }\n    }, [flippedIndexes]);\n\n    const onCardClick = () => {\n        if (!game[id].flipped && flippedCount % 3 === 0) {\n            set(state => !state);\n            setFlippedCount(flippedCount + 1);\n            const newIndexes = [...flippedIndexes];\n            newIndexes.push(id);\n            setFlippedIndexes(newIndexes)\n        } else if (\n            flippedCount % 3 === 1 &&\n            !game[id].flipped &&\n            flippedIndexes.indexOf(id) < 0\n        ) {\n            set(state => !state);\n            setFlippedCount(flippedCount + 1);\n            const newIndexes = [...flippedIndexes];\n            newIndexes.push(id);\n            setFlippedIndexes(newIndexes)\n        }\n    };\n\n    return (\n        <div onClick={onCardClick}>\n            <a.div\n                className=\"c back\"\n                style={{\n                    opacity: opacity.interpolate(o => 1 - o),\n                    transform,\n                }}\n            />\n            <a.div\n                className=\"c front\"\n                style={{\n                    opacity,\n                    transform: transform.interpolate(t => `${t} rotateX(180deg)`),\n                    background: color,\n                }}\n            />\n        </div>\n    )\n}\n\nexport default Card;\n",["40","41"],{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","severity":1,"message":"47","line":4,"column":8,"nodeType":"48","messageId":"49","endLine":4,"endColumn":12},{"ruleId":"46","severity":1,"message":"50","line":14,"column":11,"nodeType":"48","messageId":"49","endLine":14,"endColumn":18},{"ruleId":"46","severity":1,"message":"51","line":1,"column":25,"nodeType":"48","messageId":"49","endLine":1,"endColumn":31},{"ruleId":"46","severity":1,"message":"52","line":2,"column":8,"nodeType":"48","messageId":"49","endLine":2,"endColumn":10},{"ruleId":"53","severity":1,"message":"54","line":49,"column":8,"nodeType":"55","endLine":49,"endColumn":10,"suggestions":"56"},{"ruleId":"53","severity":1,"message":"57","line":24,"column":8,"nodeType":"55","endLine":24,"endColumn":24,"suggestions":"58"},{"ruleId":"42","replacedBy":"59"},{"ruleId":"44","replacedBy":"60"},"no-native-reassign",["61"],"no-negated-in-lhs",["62"],"no-unused-vars","'Game' is defined but never used.","Identifier","unusedVar","'options' is assigned a value but never used.","'useRef' is defined but never used.","'io' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'colors' and 'options'. Either include them or remove the dependency array.","ArrayExpression",["63"],"React Hook useEffect has missing dependencies: 'flippedCount', 'id', 'setFlippedCount', and 'setFlippedIndexes'. Either include them or remove the dependency array. If 'setFlippedCount' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["64"],["61"],["62"],"no-global-assign","no-unsafe-negation",{"desc":"65","fix":"66"},{"desc":"67","fix":"68"},"Update the dependencies array to be: [colors, options]",{"range":"69","text":"70"},"Update the dependencies array to be: [flippedCount, flippedIndexes, id, setFlippedCount, setFlippedIndexes]",{"range":"71","text":"72"},[1175,1177],"[colors, options]",[904,920],"[flippedCount, flippedIndexes, id, setFlippedCount, setFlippedIndexes]"]